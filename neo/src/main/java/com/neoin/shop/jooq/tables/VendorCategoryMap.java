/*
 * This file is generated by jOOQ.
 */
package com.neoin.shop.jooq.tables;


import com.neoin.shop.jooq.DefaultSchema;
import com.neoin.shop.jooq.Keys;
import com.neoin.shop.jooq.tables.records.VendorCategoryMapRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VendorCategoryMap extends TableImpl<VendorCategoryMapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor_category_map</code>
     */
    public static final VendorCategoryMap VENDOR_CATEGORY_MAP = new VendorCategoryMap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VendorCategoryMapRecord> getRecordType() {
        return VendorCategoryMapRecord.class;
    }

    /**
     * The column <code>vendor_category_map.id</code>.
     */
    public final TableField<VendorCategoryMapRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>vendor_category_map.category_id</code>.
     */
    public final TableField<VendorCategoryMapRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>vendor_category_map.vendor_id</code>.
     */
    public final TableField<VendorCategoryMapRecord, Long> VENDOR_ID = createField(DSL.name("vendor_id"), SQLDataType.BIGINT, this, "");

    private VendorCategoryMap(Name alias, Table<VendorCategoryMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private VendorCategoryMap(Name alias, Table<VendorCategoryMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor_category_map</code> table reference
     */
    public VendorCategoryMap(String alias) {
        this(DSL.name(alias), VENDOR_CATEGORY_MAP);
    }

    /**
     * Create an aliased <code>vendor_category_map</code> table reference
     */
    public VendorCategoryMap(Name alias) {
        this(alias, VENDOR_CATEGORY_MAP);
    }

    /**
     * Create a <code>vendor_category_map</code> table reference
     */
    public VendorCategoryMap() {
        this(DSL.name("vendor_category_map"), null);
    }

    public <O extends Record> VendorCategoryMap(Table<O> child, ForeignKey<O, VendorCategoryMapRecord> key) {
        super(child, key, VENDOR_CATEGORY_MAP);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<VendorCategoryMapRecord, Long> getIdentity() {
        return (Identity<VendorCategoryMapRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VendorCategoryMapRecord> getPrimaryKey() {
        return Keys.KEY_VENDOR_CATEGORY_MAP_PRIMARY;
    }

    @Override
    public List<UniqueKey<VendorCategoryMapRecord>> getKeys() {
        return Arrays.<UniqueKey<VendorCategoryMapRecord>>asList(Keys.KEY_VENDOR_CATEGORY_MAP_PRIMARY);
    }

    @Override
    public VendorCategoryMap as(String alias) {
        return new VendorCategoryMap(DSL.name(alias), this);
    }

    @Override
    public VendorCategoryMap as(Name alias) {
        return new VendorCategoryMap(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VendorCategoryMap rename(String name) {
        return new VendorCategoryMap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VendorCategoryMap rename(Name name) {
        return new VendorCategoryMap(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
