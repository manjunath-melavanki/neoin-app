/*
 * This file is generated by jOOQ.
 */
package com.neoin.shop.jooq.tables;


import com.neoin.shop.jooq.DefaultSchema;
import com.neoin.shop.jooq.Keys;
import com.neoin.shop.jooq.tables.records.VendorRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row22;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Vendor extends TableImpl<VendorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor</code>
     */
    public static final Vendor VENDOR = new Vendor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VendorRecord> getRecordType() {
        return VendorRecord.class;
    }

    /**
     * The column <code>vendor.id</code>.
     */
    public final TableField<VendorRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>vendor.created_at</code>.
     */
    public final TableField<VendorRecord, Long> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>vendor.created_by</code>.
     */
    public final TableField<VendorRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.modified_at</code>.
     */
    public final TableField<VendorRecord, Long> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>vendor.modified_by</code>.
     */
    public final TableField<VendorRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.address1</code>.
     */
    public final TableField<VendorRecord, String> ADDRESS1 = createField(DSL.name("address1"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.address2</code>.
     */
    public final TableField<VendorRecord, String> ADDRESS2 = createField(DSL.name("address2"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.area</code>.
     */
    public final TableField<VendorRecord, String> AREA = createField(DSL.name("area"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.city</code>.
     */
    public final TableField<VendorRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.code</code>.
     */
    public final TableField<VendorRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.country</code>.
     */
    public final TableField<VendorRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.image</code>.
     */
    public final TableField<VendorRecord, String> IMAGE = createField(DSL.name("image"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.land_mark</code>.
     */
    public final TableField<VendorRecord, String> LAND_MARK = createField(DSL.name("land_mark"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.latitude</code>.
     */
    public final TableField<VendorRecord, Double> LATITUDE = createField(DSL.name("latitude"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>vendor.long_desc</code>.
     */
    public final TableField<VendorRecord, String> LONG_DESC = createField(DSL.name("long_desc"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.longitude</code>.
     */
    public final TableField<VendorRecord, Double> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>vendor.name</code>.
     */
    public final TableField<VendorRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.short_desc</code>.
     */
    public final TableField<VendorRecord, String> SHORT_DESC = createField(DSL.name("short_desc"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.state</code>.
     */
    public final TableField<VendorRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.status</code>.
     */
    public final TableField<VendorRecord, Boolean> STATUS = createField(DSL.name("status"), SQLDataType.BIT, this, "");

    /**
     * The column <code>vendor.thumb</code>.
     */
    public final TableField<VendorRecord, String> THUMB = createField(DSL.name("thumb"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor.group_id</code>.
     */
    public final TableField<VendorRecord, Long> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.BIGINT, this, "");

    private Vendor(Name alias, Table<VendorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vendor(Name alias, Table<VendorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor</code> table reference
     */
    public Vendor(String alias) {
        this(DSL.name(alias), VENDOR);
    }

    /**
     * Create an aliased <code>vendor</code> table reference
     */
    public Vendor(Name alias) {
        this(alias, VENDOR);
    }

    /**
     * Create a <code>vendor</code> table reference
     */
    public Vendor() {
        this(DSL.name("vendor"), null);
    }

    public <O extends Record> Vendor(Table<O> child, ForeignKey<O, VendorRecord> key) {
        super(child, key, VENDOR);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<VendorRecord, Long> getIdentity() {
        return (Identity<VendorRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VendorRecord> getPrimaryKey() {
        return Keys.KEY_VENDOR_PRIMARY;
    }

    @Override
    public List<UniqueKey<VendorRecord>> getKeys() {
        return Arrays.<UniqueKey<VendorRecord>>asList(Keys.KEY_VENDOR_PRIMARY);
    }

    @Override
    public List<ForeignKey<VendorRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VendorRecord, ?>>asList(Keys.FKAEW7PV6G3OY0RHF8HWMWDGO58);
    }

    public VendorGroup vendorGroup() {
        return new VendorGroup(this, Keys.FKAEW7PV6G3OY0RHF8HWMWDGO58);
    }

    @Override
    public Vendor as(String alias) {
        return new Vendor(DSL.name(alias), this);
    }

    @Override
    public Vendor as(Name alias) {
        return new Vendor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vendor rename(String name) {
        return new Vendor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vendor rename(Name name) {
        return new Vendor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<Long, Long, String, Long, String, String, String, String, String, String, String, String, String, Double, String, Double, String, String, String, Boolean, String, Long> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}
