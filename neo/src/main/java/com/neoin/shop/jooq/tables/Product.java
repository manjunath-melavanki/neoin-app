/*
 * This file is generated by jOOQ.
 */
package com.neoin.shop.jooq.tables;


import com.neoin.shop.jooq.DefaultSchema;
import com.neoin.shop.jooq.Keys;
import com.neoin.shop.jooq.tables.records.ProductRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Product extends TableImpl<ProductRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>product</code>
     */
    public static final Product PRODUCT = new Product();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductRecord> getRecordType() {
        return ProductRecord.class;
    }

    /**
     * The column <code>product.id</code>.
     */
    public final TableField<ProductRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>product.created_at</code>.
     */
    public final TableField<ProductRecord, Long> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>product.created_by</code>.
     */
    public final TableField<ProductRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>product.modified_at</code>.
     */
    public final TableField<ProductRecord, Long> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>product.modified_by</code>.
     */
    public final TableField<ProductRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>product.discount_id</code>.
     */
    public final TableField<ProductRecord, Long> DISCOUNT_ID = createField(DSL.name("discount_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>product.product_category_id</code>.
     */
    public final TableField<ProductRecord, Long> PRODUCT_CATEGORY_ID = createField(DSL.name("product_category_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>product.product_image</code>.
     */
    public final TableField<ProductRecord, String> PRODUCT_IMAGE = createField(DSL.name("product_image"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>product.product_long_desc</code>.
     */
    public final TableField<ProductRecord, String> PRODUCT_LONG_DESC = createField(DSL.name("product_long_desc"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>product.product_manufacturer</code>.
     */
    public final TableField<ProductRecord, String> PRODUCT_MANUFACTURER = createField(DSL.name("product_manufacturer"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>product.product_name</code>.
     */
    public final TableField<ProductRecord, String> PRODUCT_NAME = createField(DSL.name("product_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>product.product_price</code>.
     */
    public final TableField<ProductRecord, Double> PRODUCT_PRICE = createField(DSL.name("product_price"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>product.product_sku</code>.
     */
    public final TableField<ProductRecord, Long> PRODUCT_SKU = createField(DSL.name("product_sku"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>product.product_short_desc</code>.
     */
    public final TableField<ProductRecord, String> PRODUCT_SHORT_DESC = createField(DSL.name("product_short_desc"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>product.product_status</code>.
     */
    public final TableField<ProductRecord, Boolean> PRODUCT_STATUS = createField(DSL.name("product_status"), SQLDataType.BIT, this, "");

    /**
     * The column <code>product.product_thumb</code>.
     */
    public final TableField<ProductRecord, String> PRODUCT_THUMB = createField(DSL.name("product_thumb"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>product.product_type</code>.
     */
    public final TableField<ProductRecord, String> PRODUCT_TYPE = createField(DSL.name("product_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>product.product_updated_date</code>.
     */
    public final TableField<ProductRecord, Long> PRODUCT_UPDATED_DATE = createField(DSL.name("product_updated_date"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>product.vendor_id</code>.
     */
    public final TableField<ProductRecord, Long> VENDOR_ID = createField(DSL.name("vendor_id"), SQLDataType.BIGINT, this, "");

    private Product(Name alias, Table<ProductRecord> aliased) {
        this(alias, aliased, null);
    }

    private Product(Name alias, Table<ProductRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>product</code> table reference
     */
    public Product(String alias) {
        this(DSL.name(alias), PRODUCT);
    }

    /**
     * Create an aliased <code>product</code> table reference
     */
    public Product(Name alias) {
        this(alias, PRODUCT);
    }

    /**
     * Create a <code>product</code> table reference
     */
    public Product() {
        this(DSL.name("product"), null);
    }

    public <O extends Record> Product(Table<O> child, ForeignKey<O, ProductRecord> key) {
        super(child, key, PRODUCT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ProductRecord, Long> getIdentity() {
        return (Identity<ProductRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCT_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProductRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductRecord>>asList(Keys.KEY_PRODUCT_PRIMARY);
    }

    @Override
    public Product as(String alias) {
        return new Product(DSL.name(alias), this);
    }

    @Override
    public Product as(Name alias) {
        return new Product(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Product rename(String name) {
        return new Product(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Product rename(Name name) {
        return new Product(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, Long, String, Long, String, Long, Long, String, String, String, String, Double, Long, String, Boolean, String, String, Long, Long> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
