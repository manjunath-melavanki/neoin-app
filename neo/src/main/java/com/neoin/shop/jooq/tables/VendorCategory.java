/*
 * This file is generated by jOOQ.
 */
package com.neoin.shop.jooq.tables;


import com.neoin.shop.jooq.DefaultSchema;
import com.neoin.shop.jooq.Keys;
import com.neoin.shop.jooq.tables.records.VendorCategoryRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VendorCategory extends TableImpl<VendorCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor_category</code>
     */
    public static final VendorCategory VENDOR_CATEGORY = new VendorCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VendorCategoryRecord> getRecordType() {
        return VendorCategoryRecord.class;
    }

    /**
     * The column <code>vendor_category.id</code>.
     */
    public final TableField<VendorCategoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>vendor_category.created_at</code>.
     */
    public final TableField<VendorCategoryRecord, Long> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>vendor_category.created_by</code>.
     */
    public final TableField<VendorCategoryRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor_category.modified_at</code>.
     */
    public final TableField<VendorCategoryRecord, Long> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>vendor_category.modified_by</code>.
     */
    public final TableField<VendorCategoryRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor_category.status</code>.
     */
    public final TableField<VendorCategoryRecord, Boolean> STATUS = createField(DSL.name("status"), SQLDataType.BIT, this, "");

    /**
     * The column <code>vendor_category.category_name</code>.
     */
    public final TableField<VendorCategoryRecord, String> CATEGORY_NAME = createField(DSL.name("category_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>vendor_category.priority</code>.
     */
    public final TableField<VendorCategoryRecord, Integer> PRIORITY = createField(DSL.name("priority"), SQLDataType.INTEGER, this, "");

    private VendorCategory(Name alias, Table<VendorCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private VendorCategory(Name alias, Table<VendorCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor_category</code> table reference
     */
    public VendorCategory(String alias) {
        this(DSL.name(alias), VENDOR_CATEGORY);
    }

    /**
     * Create an aliased <code>vendor_category</code> table reference
     */
    public VendorCategory(Name alias) {
        this(alias, VENDOR_CATEGORY);
    }

    /**
     * Create a <code>vendor_category</code> table reference
     */
    public VendorCategory() {
        this(DSL.name("vendor_category"), null);
    }

    public <O extends Record> VendorCategory(Table<O> child, ForeignKey<O, VendorCategoryRecord> key) {
        super(child, key, VENDOR_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<VendorCategoryRecord, Long> getIdentity() {
        return (Identity<VendorCategoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VendorCategoryRecord> getPrimaryKey() {
        return Keys.KEY_VENDOR_CATEGORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<VendorCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<VendorCategoryRecord>>asList(Keys.KEY_VENDOR_CATEGORY_PRIMARY, Keys.KEY_VENDOR_CATEGORY_UK_NPX9S9U8FP1A5CWCVO2F91DWV);
    }

    @Override
    public VendorCategory as(String alias) {
        return new VendorCategory(DSL.name(alias), this);
    }

    @Override
    public VendorCategory as(Name alias) {
        return new VendorCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VendorCategory rename(String name) {
        return new VendorCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VendorCategory rename(Name name) {
        return new VendorCategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, String, Long, String, Boolean, String, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
